package uniquecombination;
import java.util.*;
public class UniqueCombination {
    public static List<List<Integer>> combinationSum(int[]arr, int targetSum) {
        Arrays.sort(arr);
        List<List<Integer>> result = new ArrayList<>();
        backtrack(arr, 0, targetSum, new ArrayList<>(), result);
        return result;
    }

    private static void backtrack(int[] numbers, int startIndex, int remainingSum, 
            List<Integer> currentCombination, List<List<Integer>> result) {
        if (remainingSum == 0) {
            result.add(new ArrayList<>(currentCombination));
        } else {
            for (int i = startIndex; i < numbers.length; i++) {
                if (i > startIndex && numbers[i] == numbers[i - 1]) {
                    continue; 
                }
                if (numbers[i] > remainingSum) {
                    break;
                }
                currentCombination.add(numbers[i]);
                backtrack(numbers, i + 1, remainingSum - numbers[i], currentCombination, result);
                currentCombination.remove(currentCombination.size() - 1);
            }
        }
    }

    public static void main(String[] args) {
        int[] arr = {15, 1, 3, 9, 6, 7, 5};
        int targetSum = 8;

        List<List<Integer>> result = combinationSum(arr, targetSum);
        for (List<Integer> combination : result) {
            System.out.println(combination);
        }
    }
}